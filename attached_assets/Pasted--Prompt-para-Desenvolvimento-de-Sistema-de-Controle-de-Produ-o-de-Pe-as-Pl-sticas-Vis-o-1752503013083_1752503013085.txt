# Prompt para Desenvolvimento de Sistema de Controle de Produ√ß√£o de Pe√ßas Pl√°sticas

## **üìå Vis√£o Geral**  
Desenvolver uma aplica√ß√£o web moderna, responsiva e escal√°vel para **controlar a produ√ß√£o de pe√ßas pl√°sticas** em m√°quinas injetoras, com foco em:  
- Gest√£o de colaboradores e metas.  
- Acompanhamento em tempo real da produ√ß√£o.  
- Controle de tempo de produ√ß√£o (in√≠cio, pausa, retorno, finaliza√ß√£o).  
- Emiss√£o de relat√≥rios personalizados.  

---

## **üõ† Tecnologias**  
- **Backend**: Node.js (Express/NestJS)  
- **Frontend**: React.js (TypeScript) + Tailwind CSS  
- **Banco de Dados**: PostgreSQL  
- **Autentica√ß√£o**: JWT (Login e controle de usu√°rios)  
- **Padr√µes**: Clean Code, SOLID, Arquitetura Modular  

---

## **üéØ Requisitos Funcionais**  

### **üë• M√≥dulo de Colaboradores**  
- Cadastro de colaboradores (nome, matr√≠cula, turno).  
- Relacionamento com m√°quinas injetoras (um colaborador pode operar v√°rias m√°quinas).  
- Defini√ß√£o de **meta di√°ria/semanal** de produ√ß√£o.  
- Registro de:  
  - **In√≠cio de produ√ß√£o** (m√°quina + matriz).  
  - **Pausas** (justificativa, tempo).  
  - **Retomada** e **finaliza√ß√£o** do turno.  
- Hist√≥rico de produ√ß√£o (tempo √∫til, quantidade, efici√™ncia vs meta).  

### **‚öôÔ∏è M√≥dulo de M√°quinas Injetoras**  
- Cadastro de m√°quinas (ID, nome, capacidade m√°xima/dia).  
- Relacionamento com:  
  - **Matrizes** (quais pe√ßas podem ser produzidas).  
  - **Colaboradores** (quem opera a m√°quina).  
- Status de **disponibilidade/ocupa√ß√£o** em tempo real.  

### **üß© M√≥dulo de Matrizes (Formas de Pe√ßa)**  
- Cadastro de matrizes (c√≥digo, nome, pe√ßa correspondente).  
- Quantidade de pe√ßas por ciclo (opcional).  
- Toda produ√ß√£o deve estar vinculada a uma matriz.  

### **üîÑ Controle de Produ√ß√£o**  
- Fluxo de produ√ß√£o:  
  1. **In√≠cio**: Colaborador seleciona m√°quina + matriz.  
  2. **Pausa**: Registra motivo (manuten√ß√£o, descanso).  
  3. **Retorno**: Reinicia contagem de tempo √∫til.  
  4. **Finaliza√ß√£o**: Gera resumo (tempo √∫til, pe√ßas produzidas, efici√™ncia vs meta).  
- C√°lculos autom√°ticos:  
  - Tempo total vs tempo √∫til.  
  - Quantidade produzida vs meta.  

### **üìä M√≥dulo de Relat√≥rios**  
- Filtros por:  
  - Colaborador  
  - M√°quina  
  - Matriz  
  - Per√≠odo (data/hora)  
- M√©tricas:  
  - Tempo de produ√ß√£o real x pausas.  
  - Efici√™ncia (produ√ß√£o vs meta vs capacidade da m√°quina).  
  - Turnos pendentes/incompletos.  
- Exporta√ß√£o em PDF/Excel.  

---

## **üé® UI/UX Requisitos**  
- **Design Responsivo** (mobile + desktop).  
- **Dashboard em Tempo Real** com:  
  - Gr√°ficos de produ√ß√£o (m√°quinas, colaboradores).  
  - Alertas de metas n√£o atingidas.  
- **Clean UI** com Tailwind CSS (moderno, escuro/claro).  

---

## **‚ö° Requisitos N√£o-Funcionais**  
- **Performance**: Suporte a 100+ usu√°rios concorrentes.  
- **Seguran√ßa**: Autentica√ß√£o JWT + RBAC (controle de acesso).  
- **Escalabilidade**: Microservi√ßos (opcional para futuras expans√µes).  
- **Testes**: Unit√°rios (Jest) + E2E (Cypress).  

---

## **üìù Entreg√°veis Esperados**  
1. **Backend**: API RESTful documentada (Swagger/OpenAPI).  
2. **Frontend**: Aplica√ß√£o React com estados gerenciados (Redux/Zustand).  
3. **Banco de Dados**: Modelo ER diagramado + scripts SQL.  
4. **Deploy**: Docker-compose (local) + guia para AWS/Heroku.  

---

**‚ùó Observa√ß√µes:**  
- Priorizar **clean code** e componentes reutiliz√°veis.  
- Incluir documenta√ß√£o t√©cnica e do usu√°rio.  
- Valida√ß√µes robustas (ex: evitar produ√ß√£o sem matriz vinculada).  